/*
 * This file is generated by jOOQ.
 */
package ru.skwardlow.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import ru.skwardlow.database.DefaultSchema;
import ru.skwardlow.database.tables.records.SalesunityRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Salesunity extends TableImpl<SalesunityRecord> {

    private static final long serialVersionUID = -907123385;

    /**
     * The reference instance of <code>SalesUnity</code>
     */
    public static final Salesunity SALESUNITY = new Salesunity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesunityRecord> getRecordType() {
        return SalesunityRecord.class;
    }

    /**
     * The column <code>SalesUnity.id_Man</code>.
     */
    public final TableField<SalesunityRecord, Integer> ID_MAN = createField("id_Man", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>SalesUnity.id_Sale</code>.
     */
    public final TableField<SalesunityRecord, Integer> ID_SALE = createField("id_Sale", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>SalesUnity</code> table reference
     */
    public Salesunity() {
        this(DSL.name("SalesUnity"), null);
    }

    /**
     * Create an aliased <code>SalesUnity</code> table reference
     */
    public Salesunity(String alias) {
        this(DSL.name(alias), SALESUNITY);
    }

    /**
     * Create an aliased <code>SalesUnity</code> table reference
     */
    public Salesunity(Name alias) {
        this(alias, SALESUNITY);
    }

    private Salesunity(Name alias, Table<SalesunityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Salesunity(Name alias, Table<SalesunityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SalesunityRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ru.skwardlow.database.tables.Salesunity.SALESUNITY, "KEY_SalesUnity_PRIMARY", ru.skwardlow.database.tables.Salesunity.SALESUNITY.ID_MAN, ru.skwardlow.database.tables.Salesunity.SALESUNITY.ID_SALE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SalesunityRecord>> getKeys() {
        return Arrays.<UniqueKey<SalesunityRecord>>asList(
              Internal.createUniqueKey(ru.skwardlow.database.tables.Salesunity.SALESUNITY, "KEY_SalesUnity_PRIMARY", ru.skwardlow.database.tables.Salesunity.SALESUNITY.ID_MAN, ru.skwardlow.database.tables.Salesunity.SALESUNITY.ID_SALE)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Salesunity as(String alias) {
        return new Salesunity(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Salesunity as(Name alias) {
        return new Salesunity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesunity rename(String name) {
        return new Salesunity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Salesunity rename(Name name) {
        return new Salesunity(name, null);
    }
}
