/*
 * This file is generated by jOOQ.
 */
package ru.skwardlow.database.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;

import ru.skwardlow.database.DefaultSchema;
import ru.skwardlow.database.tables.records.SalesRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Sales extends TableImpl<SalesRecord> {

    private static final long serialVersionUID = 1956214322;

    /**
     * The reference instance of <code>Sales</code>
     */
    public static final Sales SALES = new Sales();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SalesRecord> getRecordType() {
        return SalesRecord.class;
    }

    /**
     * The column <code>Sales.id</code>.
     */
    public final TableField<SalesRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Sales.sale</code>.
     */
    public final TableField<SalesRecord, String> SALE = createField("sale", org.jooq.impl.SQLDataType.VARCHAR(30).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>Sales.cost</code>.
     */
    public final TableField<SalesRecord, String> COST = createField("cost", org.jooq.impl.SQLDataType.VARCHAR(15).defaultValue(org.jooq.impl.DSL.inline("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>Sales</code> table reference
     */
    public Sales() {
        this(DSL.name("Sales"), null);
    }

    /**
     * Create an aliased <code>Sales</code> table reference
     */
    public Sales(String alias) {
        this(DSL.name(alias), SALES);
    }

    /**
     * Create an aliased <code>Sales</code> table reference
     */
    public Sales(Name alias) {
        this(alias, SALES);
    }

    private Sales(Name alias, Table<SalesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Sales(Name alias, Table<SalesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SalesRecord, Integer> getIdentity() {
        return Internal.createIdentity(ru.skwardlow.database.tables.Sales.SALES, ru.skwardlow.database.tables.Sales.SALES.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SalesRecord> getPrimaryKey() {
        return Internal.createUniqueKey(ru.skwardlow.database.tables.Sales.SALES, "KEY_Sales_PRIMARY", ru.skwardlow.database.tables.Sales.SALES.ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SalesRecord>> getKeys() {
        return Arrays.<UniqueKey<SalesRecord>>asList(
              Internal.createUniqueKey(ru.skwardlow.database.tables.Sales.SALES, "KEY_Sales_PRIMARY", ru.skwardlow.database.tables.Sales.SALES.ID)
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sales as(String alias) {
        return new Sales(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Sales as(Name alias) {
        return new Sales(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Sales rename(String name) {
        return new Sales(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Sales rename(Name name) {
        return new Sales(name, null);
    }
}
